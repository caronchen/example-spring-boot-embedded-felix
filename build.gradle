buildscript {
	ext {
        springBootVersion = '2.0.3.RELEASE'
        springDependencyManagementVersion = '1.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
	id 'java' apply true
	id 'eclipse' apply true
	id 'org.springframework.boot' version '2.0.3.RELEASE' apply true
	id 'io.spring.dependency-management' version '1.0.5.RELEASE' apply true
	id 'application' apply true
}

//defaultTasks 'build','copyFrameworkBundles'

repositories {
	mavenCentral()
}

sourceCompatibility = 1.8
group = 'com.example'
version = '0.0.1-SNAPSHOT'
mainClassName = 'com.example.App'

configurations {
    framework_bundles
}

bootJar {
	launchScript()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter')
	compile('org.apache.felix:org.apache.felix.framework:6.0.0')
	compile('org.apache.felix:org.apache.felix.main:6.0.0')
	
	testCompile('org.springframework.boot:spring-boot-starter-test')
	
	framework_bundles "org.apache.felix:org.apache.felix.fileinstall:3.6.4"
	framework_bundles "org.apache.felix:org.apache.felix.configadmin:1.9.2"
	framework_bundles "org.apache.felix:org.apache.felix.scr:2.1.0"
	framework_bundles "org.apache.felix:org.apache.felix.eventadmin:1.5.0"
	framework_bundles "org.apache.felix:org.apache.felix.http.jetty:4.0.0"
	framework_bundles "org.apache.felix:org.apache.felix.http.servlet-api:1.1.2"
	
	framework_bundles "org.apache.felix:org.apache.felix.gogo.command:1.0.2"
	framework_bundles "org.apache.felix:org.apache.felix.gogo.runtime:1.1.0"
	framework_bundles "org.apache.felix:org.apache.felix.gogo.shell:1.1.0"
	
	
}

task createDistributionLayout {
	
	dependsOn clean

	def distroFolder = new File("$buildDir/distro")
    def binFolder = new File(distroFolder,"bin")
    def libsFolder = new File(distroFolder,"lib")
    def pluginsFolder = new File(distroFolder,"plugins")
    def bundlesFolder = new File(distroFolder,"framework_bundles")

	if( !distroFolder.exists() ) {
	  distroFolder.mkdirs()
	}
	if( !binFolder.exists() ) {
	  binFolder.mkdirs()
	}
	if( !libsFolder.exists() ) {
	  libsFolder.mkdirs()
	}
	if( !pluginsFolder.exists() ) {
	  pluginsFolder.mkdirs()
	}
	if( !bundlesFolder.exists() ) {
	  bundlesFolder.mkdirs()
	}
	
}

task addScriptsToDistribution(type: Copy) {

	dependsOn createDistributionLayout
	
	def binFolder = new File("$buildDir/distro/bin")
	from file("$projectDir/scripts")
	into binFolder
    
}

task addLibsToDistribution(type: Copy) {
	
	dependsOn bootJar, addScriptsToDistribution
	
	def fileName = "${jar.baseName}-${jar.version}"
	def libsFolder = new File("$buildDir/distro/lib")
	from file("$buildDir/libs/${fileName}.jar")
  	into libsFolder
    
}

task addFrameworkBundlesToDistribution(type: Copy) {
	
	dependsOn addLibsToDistribution
	
	def bundlesFolder = new File("$buildDir/distro/framework_bundles")
	from configurations.framework_bundles
    into bundlesFolder
    
}

task zipDistribution(type: Zip) {
  
  dependsOn addFrameworkBundlesToDistribution
  
  def fileName = "${jar.baseName}-${jar.version}"
  from file("$buildDir/distro")
  include "**/*"
  archiveName "${fileName}.zip"
  
}

createDistributionLayout.group = "custom"
addScriptsToDistribution.group = "custom"
addLibsToDistribution.group = "custom"
addFrameworkBundlesToDistribution.group = "custom"
zipDistribution.group = "custom"